#!/bin/bash
source /etc/os-release
set -eux

if [[ ${NAME} == "Arch Linux" ]]; then
  sudo pacman -Syu iptables-nft
  sudo pacman -Syu kubectl kubelet kubeadm containerd ebtables socat ethtool conntrack-tools
else
  echo 'Only Arch Linux is supported at this point.'
  if [[ -z ${SKIP_OS_CHECK} ]]; then
    printf 'to bypass this check:\nexport SKIP_OS_CHECK=1\n'
    exit 1
  fi
fi

check_if_line_exists()
{
  grep -qsFx "${LINE_TO_ADD}" "${TARGET_FILE}"
}

add_line_to()
{
  [ -w "${TARGET_FILE}" ] || TARGET_FILE=${TARGET_FILE}
  printf "%s\n" "${LINE_TO_ADD}" | sudo tee -a "${TARGET_FILE}"
}

adder () {
  TARGET_FILE=$1
  LINE_TO_ADD=$2
  echo "TARGET_FILE=$TARGET_FILE LINE_TO_ADD=$LINE_TO_ADD"
  check_if_line_exists || add_line_to
}

main () {
  adder /etc/modules-load.d/k8s.conf overlay
  adder /etc/modules-load.d/k8s.conf br_netfilter
  adder /etc/sysctl.d/k8s.conf 'net.bridge.bridge-nf-call-iptables  = 1'
  adder /etc/sysctl.d/k8s.conf 'net.bridge.bridge-nf-call-ip6tables = 1'
  adder /etc/sysctl.d/k8s.conf 'net.ipv4.ip_forward                 = 1'
  adder /etc/subuid "$USER:10000:65536"
  adder /etc/subgid "$USER:10000:65536"

  sudo sysctl --system
  #(Optionally) verify that the br_netfilter, overlay modules are loaded by running the following commands:
  lsmod | grep br_netfilter
  lsmod | grep overlay
  #(Optionally) verify that the net.bridge.bridge-nf-call-iptables, net.bridge.bridge-nf-call-ip6tables, and net.ipv4.ip_forward system variables are set to 1 in your sysctl config by running the following command:
  sudo sysctl net.bridge.bridge-nf-call-iptables net.bridge.bridge-nf-call-ip6tables net.ipv4.ip_forward
  set +e
  which containerd-rootless-setuptool.sh
  if [[ $? == 0 ]]; then
    containerd-rootless-setuptool.sh install
  else
    printf "please install nerdctl-full-bin from the AUR and re-run this script\n"
    exit 1
  fi
  set -e
  sudo systemctl enable --now containerd

  sudo swapoff -a
  sudo sed -i '/ swap / s/^/#/' /etc/fstab
  #If you see /dev/zram0 you should also remove the zram kernel module by:
  set +e
  sudo swapoff /dev/zram0
  sudo modprobe -r zram
  set -e
  #If your zram is managed by systemd, try finding the .swap unit:

  sudo systemctl --type swap
  printf 'If any swap found, you can mask it:\n'
  printf 'sudo systemctl mask "dev-XYZ.swap"\n'

  sudo mkdir -p /etc/containerd
  if [[ ! -f /etc/containerd/config.toml ]]; then
    containerd config default|sed 's/SystemdCgroup = false/SystemdCgroup = true/' | sudo tee /etc/containerd/config.toml > /dev/null
  else
    printf 'It looks like you already have /etc/containerd/config.toml, I will leave it alonve for now\n'
  fi

  printf 'This is a good time to reboot\n'
}

main
exit 0
